// Code generated by MockGen. DO NOT EDIT.
// Source: doublet.go

// Package client is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDoublet is a mock of Doublet interface
type MockDoublet struct {
	ctrl     *gomock.Controller
	recorder *MockDoubletMockRecorder
}

// MockDoubletMockRecorder is the mock recorder for MockDoublet
type MockDoubletMockRecorder struct {
	mock *MockDoublet
}

// NewMockDoublet creates a new mock instance
func NewMockDoublet(ctrl *gomock.Controller) *MockDoublet {
	mock := &MockDoublet{ctrl: ctrl}
	mock.recorder = &MockDoubletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDoublet) EXPECT() *MockDoubletMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockDoublet) Do(targetURL string) (DoubletResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", targetURL)
	ret0, _ := ret[0].(DoubletResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDoubletMockRecorder) Do(targetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoublet)(nil).Do), targetURL)
}
