// Code generated by MockGen. DO NOT EDIT.
// Source: streaming.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStreaming is a mock of Streaming interface
type MockStreaming struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingMockRecorder
}

// MockStreamingMockRecorder is the mock recorder for MockStreaming
type MockStreamingMockRecorder struct {
	mock *MockStreaming
}

// NewMockStreaming creates a new mock instance
func NewMockStreaming(ctrl *gomock.Controller) *MockStreaming {
	mock := &MockStreaming{ctrl: ctrl}
	mock.recorder = &MockStreamingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreaming) EXPECT() *MockStreamingMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockStreaming) Run(ctx context.Context) (<-chan Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(<-chan Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockStreamingMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreaming)(nil).Run), ctx)
}
