// Code generated by MockGen. DO NOT EDIT.
// Source: shindanmaker.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	service "github.com/chitoku-k/ejaculation-counter/reactor/service"
	gomock "github.com/golang/mock/gomock"
)

// MockShindanmaker is a mock of Shindanmaker interface.
type MockShindanmaker struct {
	ctrl     *gomock.Controller
	recorder *MockShindanmakerMockRecorder
}

// MockShindanmakerMockRecorder is the mock recorder for MockShindanmaker.
type MockShindanmakerMockRecorder struct {
	mock *MockShindanmaker
}

// NewMockShindanmaker creates a new mock instance.
func NewMockShindanmaker(ctrl *gomock.Controller) *MockShindanmaker {
	mock := &MockShindanmaker{ctrl: ctrl}
	mock.recorder = &MockShindanmakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShindanmaker) EXPECT() *MockShindanmakerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockShindanmaker) Do(ctx context.Context, name, targerURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, name, targerURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockShindanmakerMockRecorder) Do(ctx, name, targerURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockShindanmaker)(nil).Do), ctx, name, targerURL)
}

// Name mocks base method.
func (m *MockShindanmaker) Name(account service.Account) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", account)
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockShindanmakerMockRecorder) Name(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockShindanmaker)(nil).Name), account)
}
