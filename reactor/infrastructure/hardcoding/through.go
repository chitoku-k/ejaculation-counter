package hardcoding

import "github.com/chitoku-k/ejaculation-counter/reactor/repository"

var (
	ThroughVariants = []string{
		"doruȝ-",
		"dorw",
		"dorwe",
		"dorwgh",
		"dourȝh",
		"drowgȝ",
		"durghe",
		"durwe",
		"-thogh",
		"thorch",
		"thorew",
		"thorewe",
		"thorffe",
		"thorg",
		"Thorgh",
		"thorgh",
		"-thorgh",
		"thoʳgh",
		"thorghe",
		"thorght",
		"thorghw",
		"thorghwe",
		"thorgth",
		"thorh",
		"thoro",
		"thorogh",
		"thoroghe",
		"thoroght",
		"-thoroght",
		"thorohe",
		"thoroo",
		"thorou",
		"Thorough",
		"thorough",
		"thorough-",
		"thoroughe",
		"thorought",
		"Thorouh",
		"thorouȝ",
		"thorouȝh",
		"Thorow",
		"thorow",
		"thorow-",
		"Thorowe",
		"thorowe",
		"thorowg",
		"thorowgh",
		"thorowghe",
		"thorowght",
		"thorowh",
		"thorowth",
		"thorowut",
		"thorowȝ",
		"thorowȝt",
		"thorrou",
		"thorrow",
		"thorth",
		"thorthe",
		"thoru",
		"thoru-",
		"thorue",
		"thorugh",
		"-thorugh",
		"thorughe",
		"thorught",
		"-thorught",
		"Thoruh",
		"thoruh",
		"thoruh-",
		"thorur",
		"thoruth",
		"Thoruȝ",
		"thoruȝ",
		"thoruȝh",
		"thorv",
		"Thorw",
		"thorw",
		"-thorw",
		"thoʳw",
		"Thorwe",
		"thorwe",
		"thorwgh",
		"thorwh",
		"thorwȝ",
		"-thorwȝ",
		"thoʳwȝ",
		"thorwȝe",
		"Thorȝ",
		"thorȝ",
		"Thorȝe",
		"thorȝe",
		"thorȝh",
		"thorȝoh",
		"thorȝt",
		"thorȝw",
		"thorȝwe",
		"thour",
		"thour",
		"thoure",
		"thourgh",
		"-thourgh",
		"thourghe",
		"thourght-",
		"thourh",
		"thourhe",
		"thourow",
		"thourr",
		"thourth",
		"thourw",
		"thourw",
		"thourwg",
		"thourȝ",
		"thourȝ",
		"thourȝe",
		"thow",
		"thowe",
		"thowffe",
		"thowr",
		"thowrgh",
		"thowrow",
		"thowur",
		"thrawth",
		"threw",
		"thro",
		"thro-",
		"-thro",
		"throch",
		"throcht",
		"throgh",
		"throghe",
		"throghet",
		"throght",
		"throght",
		"throghte",
		"throighe",
		"throu",
		"throuche",
		"throue",
		"throug",
		"through",
		"through-",
		"throughe",
		"throught",
		"throuh",
		"throuȝ",
		"throuȝe",
		"throuȝht",
		"throve",
		"throw",
		"throw-",
		"tʰrow",
		"throwe",
		"thʳowe",
		"throwe",
		"throwg",
		"throwgh",
		"throwght",
		"throwh",
		"throwr",
		"throwth",
		"throwȝ",
		"throwȝe",
		"throȝ",
		"-throȝe",
		"throȝe",
		"throȝgh",
		"throȝghe",
		"throȝh",
		"throȝhe",
		"throȝt",
		"thruch",
		"thrue-",
		"thrug-",
		"Thrugh",
		"thrugh",
		"thrughe",
		"thrught",
		"thrughte",
		"thruh",
		"thruth",
		"thruȝ",
		"thruȝe",
		"thruȝhe",
		"thrvoo",
		"thrw",
		"thrwe",
		"thrwgh",
		"thrwght",
		"thrygh",
		"thuht",
		"thur",
		"thurch",
		"thurew",
		"thurg",
		"thurge",
		"thurge-",
		"thurgeh",
		"Thurgh",
		"thurgh",
		"thurgh-",
		"-thurgh",
		"thurgh",
		"thurghe",
		"thurght",
		"thurghte",
		"thurgth",
		"thurgwe",
		"Thurh",
		"thurh",
		"thurhe",
		"thurhge",
		"thurhgh",
		"thuro",
		"thurow",
		"thurowe",
		"thurth",
		"thurthe",
		"thuru",
		"thurv",
		"thurw",
		"-thurw",
		"thurwe",
		"Thurȝ",
		"thurȝ",
		"thurȝe",
		"Thurȝh",
		"thurȝh",
		"Thurȝhg",
		"thurȝt",
		"thurȝth",
		"thwrgh",
		"thwrw",
		"torgh",
		"torghe",
		"torw",
		"-torwe",
		"trghug",
		"trogh",
		"troght",
		"trough",
		"trow",
		"trowe",
		"trowffe",
		"trowgh",
		"trowght",
		"trugh",
		"trughe",
		"trught",
		"twrw",
		"yerowe",
		"yhorh",
		"yhoru",
		"yhrow",
		"yhurgh",
		"yhurght",
		"yora",
		"yorch",
		"yorgh",
		"yorghe",
		"yorh",
		"yoro",
		"yorou",
		"yoroue",
		"yorough",
		"yorour",
		"yorow",
		"yorow-",
		"yorowe",
		"yorowe",
		"yoru",
		"yorugh",
		"yoruh",
		"yoruȝ",
		"yorw",
		"yorwe",
		"yorȝ",
		"your",
		"yourch",
		"yourgh",
		"yourghe",
		"yourh",
		"yourw-",
		"yourȝ",
		"yowr",
		"yowrw",
		"yoȝou",
		"yrogh",
		"yrou-",
		"yrow",
		"yrugh",
		"yruȝ",
		"yurch",
		"yurg-",
		"yurgh",
		"yurghe",
		"yurght",
		"yurh",
		"yurhg",
		"yurht",
		"yurowe",
		"yurth",
		"yurthe",
		"yuru",
		"yurw",
		"yurwh",
		"yurȝ",
		"yurȝe",
		"ðoru",
		"þarȝ",
		"þerew",
		"þᵉrew",
		"þerow",
		"þerue-",
		"þhorow",
		"þhurȝ",
		"þor",
		"þorch",
		"þore",
		"þoreu",
		"þorew",
		"þorewe",
		"þorewȝ",
		"þoreȝ",
		"þorg",
		"-þorgh",
		"þorgh",
		"þorghe",
		"þorght",
		"þorghȝ",
		"þorguh",
		"þorgȝ",
		"þorh",
		"þoro",
		"þorogh",
		"þoroghe",
		"þorou",
		"þoroᵘ",
		"þoroue",
		"þorough",
		"þorought",
		"þorouh",
		"þorour",
		"-þorouȝ",
		"þorouȝ",
		"þorouȝe",
		"þorouȝh",
		"þorᵒuȝt",
		"þorow",
		"-þorow",
		"þᵒrow",
		"þorow",
		"þorowe",
		"þorowgh",
		"þorowghe",
		"þorowh",
		"þorowth",
		"þorowþ",
		"þorouwȝ",
		"þoroȝ",
		"þorrow",
		"þorrughe",
		"þorth",
		"þoru",
		"-þoru",
		"þorue",
		"þorug",
		"þorugh",
		"þorught",
		"þorugȝ",
		"þoruh",
		"þoruhg",
		"þoruth",
		"þoruþ",
		"þoruȝ",
		"-þoruȝ",
		"þoruȝe",
		"þoruȝh",
		"þoruȝt",
		"þorv",
		"þorw",
		"þorw-",
		"-þorw",
		"þorwe",
		"þorwgh",
		"þorwgȝ",
		"þorwh",
		"-þorwh",
		"þorwhe",
		"þorwth",
		"þorwtȝ",
		"þorwȝ",
		"þorwȝe",
		"þorþ",
		"þorȝ",
		"þorȝe",
		"þorȝh",
		"þorȝhȝ",
		"þorȝt",
		"þough",
		"þour",
		"þoᵘr",
		"þour",
		"þourg",
		"þourgh",
		"þourght",
		"þourgȝ",
		"þourh",
		"þourh",
		"þourow",
		"þourt",
		"þourth",
		"þouruȝ",
		"þourw",
		"þourw-",
		"-þourw",
		"þourwe",
		"þourþ",
		"þourȝ",
		"t-þourȝ",
		"þourȝ",
		"þourȝe",
		"þourȝh",
		"þourȝt",
		"þourȝw",
		"þouȝ",
		"þouȝt",
		"þowr",
		"þowre",
		"þro",
		"þrogh",
		"þroghe",
		"þrorow",
		"þrorowe",
		"þroth",
		"þrou",
		"þrough",
		"þrought",
		"þroughte-",
		"þrouh",
		"þrouhe",
		"þrouht",
		"þrouȝ",
		"þrouȝe",
		"þrouȝh",
		"þrouȝt",
		"þrouȝte",
		"þrouȝth",
		"þrow",
		"þʳow",
		"þrowe",
		"þrowgh",
		"þrowghe",
		"þrowh",
		"-þrowþ",
		"þrowȝ",
		"þrowȝe",
		"þroȝ",
		"þroȝe",
		"þroȝgh",
		"þroȝh",
		"þroȝt",
		"þroȝth",
		"þrugh",
		"-þruh",
		"þruȝ",
		"þruȝe",
		"þur",
		"þurch",
		"þureh",
		"þureȝ",
		"þurf",
		"þurg",
		"þurgh",
		"-þurgh",
		"þurghe",
		"þurght",
		"þurghȝ",
		"þurgȝh",
		"þurh",
		"þurʰ",
		"þurhg",
		"þurht",
		"þuro",
		"þurow",
		"þurrh",
		"þurru",
		"þurth",
		"þurthe",
		"þuru",
		"þuruch",
		"þurugh",
		"þurughe",
		"þurut",
		"þuruȝ",
		"þurw",
		"þurw-",
		"þurwe",
		"þurwȝ",
		"þurwȝ",
		"þurþ",
		"þurȝ",
		"þurȝe",
		"þurȝg",
		"þurȝh",
		"þurȝhg",
		"þurȝt",
		"þurȝth",
		"þwrgh",
		"ȝorgh",
		"ȝoru",
		"ȝoruȝ",
		"ȝoruȝt",
		"ȝorw",
		"ȝour",
		"ȝowr",
		"ȝurch",
	}
)

type throughRepository struct {
}

func NewThroughRepository() repository.ThroughRepository {
	return &throughRepository{}
}

func (*throughRepository) Get() []string {
	return ThroughVariants
}
