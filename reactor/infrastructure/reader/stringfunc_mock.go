// Code generated by MockGen. DO NOT EDIT.
// Source: stringfunc.go

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStringGenerator is a mock of StringGenerator interface.
type MockStringGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockStringGeneratorMockRecorder
}

// MockStringGeneratorMockRecorder is the mock recorder for MockStringGenerator.
type MockStringGeneratorMockRecorder struct {
	mock *MockStringGenerator
}

// NewMockStringGenerator creates a new mock instance.
func NewMockStringGenerator(ctrl *gomock.Controller) *MockStringGenerator {
	mock := &MockStringGenerator{ctrl: ctrl}
	mock.recorder = &MockStringGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringGenerator) EXPECT() *MockStringGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockStringGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockStringGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockStringGenerator)(nil).Generate))
}
